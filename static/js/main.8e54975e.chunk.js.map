{"version":3,"sources":["firebase.js","components/Header.js","components/RadioButtons.js","components/UserList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","react_default","a","createElement","className","Component","RadioButtons","action","onClick","this","props","getChoiceValue","type","id","name","value","htmlFor","UserList","saveListToFirebase","clearList","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","targetedValueOfRadioButton","target","categoryChoiceArrayCopy","toConsumableArray","state","setState","categoryChoiceArray","handleClick","nameOfObject","userPackingListItems","userPackingList","push","removeItemFromList","index","packingList","splice","database","ref","alert","drumsArray","cymbalsArray","hardwareArray","accessoriesArray","_this2","once","dataSnapshot","drums","child","val","cymbals","hardware","accessories","console","log","_this3","components_Header","components_RadioButtons","map","choice","key","title","components_UserList","packingListItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e54975e.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCb5AMHQL2cWq49ehhXF-3pTNlJKTnKVvQ\",\r\n    authDomain: \"julien-bigras-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://julien-bigras-project-5.firebaseio.com\",\r\n    projectId: \"julien-bigras-project-5\",\r\n    storageBucket: \"julien-bigras-project-5.appspot.com\",\r\n    messagingSenderId: \"599630672244\",\r\n    appId: \"1:599630672244:web:0d4939869520c64a\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Gig Essentials</h1>\r\n                <h2>A practical packing guide for drummers everywhere</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass RadioButtons extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form action=\"\">\r\n\r\n                <div className=\"radioFirstTwo\">\r\n                    <div className=\"radioButton\">\r\n                        <input onClick={this.props.getChoiceValue} type=\"radio\" id=\"drums\" name=\"drumGear\" value=\"drumsArray\"/>\r\n                        <label htmlFor=\"drums\">Drums</label>\r\n                    </div>\r\n                    <div className=\"radioButton\">\r\n                        <input onClick={this.props.getChoiceValue} type=\"radio\" id=\"cymbals\" name=\"drumGear\" value=\"cymbalsArray\" />\r\n                        <label htmlFor=\"cymbals\">Cymbals</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"radioSecondTwo\">\r\n                    <div className=\"radioButton\">    \r\n                        <input onClick={this.props.getChoiceValue} type=\"radio\" id=\"hardware\" name=\"drumGear\" value=\"hardwareArray\" />\r\n                        <label htmlFor=\"hardware\">Hardware</label>\r\n                    </div>\r\n                    <div className=\"radioButton\">\r\n                        <input onClick={this.props.getChoiceValue} type=\"radio\" id=\"accessories\" name=\"drumGear\" value=\"accessoriesArray\" />\r\n                        <label htmlFor=\"accessories\">Accessories</label>\r\n                    </div>\r\n                </div>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RadioButtons;\r\n\r\n// when user selects a radio button, the value will correspond to an array of drum items, which will populate a dropdown menu","import React, { Component } from 'react';\r\n\r\nclass UserList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"userList\">\r\n                \r\n                <div className=\"buttons\">\r\n                    <button onClick={this.props.saveListToFirebase}>save list</button>\r\n                    <button onClick={this.props.clearList}>clear list</button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserList;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Header from './components/Header';\nimport RadioButtons from './components/RadioButtons';\nimport UserList from './components/UserList';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      drumsArray: [],\n      cymbalsArray: [],\n      hardwareArray: [],\n      accessoriesArray: [],\n      categoryChoiceArray: [],\n      userPackingList: []\n    }\n  }\n\n  componentDidMount() {\n    // saving a reference to the gear node in dbRefGetInfo\n    const dbRefGetInfo = firebase.database().ref('/drumEquipment');\n    \n    // Basic usage of .once() to read the data located at in the Firebase database\n    // gets everything that exists at the drumEquipment node of the Firebase database\n    dbRefGetInfo.once('value', (dataSnapshot) => {\n      // handles the read data, and assigns it to variables\n      const drums = dataSnapshot.child('drums').val();\n      const cymbals = dataSnapshot.child('cymbals').val();\n      const hardware = dataSnapshot.child('hardware').val();\n      const accessories = dataSnapshot.child('accessories').val();\n      console.log(dataSnapshot.val(), drums, cymbals, hardware, accessories);\n\n      this.setState({\n        drumsArray: drums,\n        cymbalsArray: cymbals,\n        hardwareArray: hardware,\n        accessoriesArray: accessories\n      })\n    });\n  }\n\n  getChoiceValue = (event) => {\n    const targetedValueOfRadioButton = event.target.value;\n    const categoryChoiceArrayCopy = [...this.state[targetedValueOfRadioButton]];\n\n    // changes the state of categoryChoiceArray from an empty array to the value of categoryChoiceArrayCopy, which corresponds to the radio input chosen by the user\n    this.setState({\n      categoryChoiceArray: categoryChoiceArrayCopy\n    })\n  }\n\n  // don't need to pass in event as an argument, because there is no default event to prevent, as the handleClick function is attached to an li element\n  handleClick = (nameOfObject) => {\n\n    // creates a clone of the original userPackingList array, and saves it to a variable\n    // const userPackingListItems = Array.from(this.state.userPackingList) would work the same as below\n    const userPackingListItems = [...this.state.userPackingList];\n\n    // when the list items are clicked by the user, push them to the cloned array saved to userPackingListItems variable\n    userPackingListItems.push(nameOfObject);\n\n    // changes the state of userPackingList from an empty array to the value of userPackingListItems, which has been populated by the list items clicked by the user\n    this.setState({\n      userPackingList: userPackingListItems\n    })\n  }\n\n  // allows user to remove individual items from the list\n  removeItemFromList = (index) => {\n    //creates a copy of the userPackingList array, and saves it to a variable\n    const packingList = this.state.userPackingList;\n    //splices a single item from the array, based on the index number passed in as an argument\n    packingList.splice(index, 1);\n\n    this.setState({\n      // sets the state of the userPackingList to equal the copy, which was spliced\n      userPackingList: packingList\n    })\n  }\n\n  // pushes the user's finished list to the Firebase database\n  saveListToFirebase = () => {\n    const dbRef = firebase.database().ref('/userLists');\n    dbRef.push(this.state.userPackingList);\n\n    alert('your list has been saved!');\n  }\n\n  // clears the list\n  clearList = () => {\n    this.setState({\n      userPackingList: []\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"largeContainer\">\n          <Header />\n          <div className=\"wrapper\">\n            <section className=\"flexContainer\">\n              <section className=\"userOptionsSection\">\n\n                <h3>Choose a Category:</h3>\n                <RadioButtons getChoiceValue={this.getChoiceValue} />\n\n                <ul>\n                  {this.state.categoryChoiceArray.map((choice) => {\n                    return (\n                      <li key= {choice.key}>\n                        {choice.title}\n                        <button onClick={() => this.handleClick(choice.title)}>add</button>\n                      </li>\n                    )\n                  })}\n                </ul>\n              </section> {/* closes userOptionsSection */}\n\n              <section className=\"userSelectionsList\">\n                <h3>Your Packing List:</h3>\n\n                <UserList saveListToFirebase={this.saveListToFirebase} clearList={this.clearList}/>\n\n                {this.state.userPackingList.map((packingListItem, index) => {\n                  return (\n                    <div className=\"userSelectionItem\">\n                      <label>\n                        <input type=\"checkbox\" id={packingListItem.key}/>\n                        {packingListItem}\n                        <span className=\"checkmark\"></span>\n                      </label>\n                      <button onClick={() => this.removeItemFromList(index)}>remove</button>\n                    </div>\n                    )\n                })}\n\n              </section> {/* closes userSelectionsList section */}\n            </section> {/* closes flex container */}\n          </div> {/* closes wrapper */}\n        \n        </div> {/* closes largeContainer */}\n\n        <footer>\n          <p>Created by Julien Bigras</p>\n        </footer>\n\n      </div> //closes 'App' div\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}